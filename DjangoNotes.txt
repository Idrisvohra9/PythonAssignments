* Django:
The Django web framework is a free, open source framework that can speed
up development of a web application being built in the Python programming
language.

* Why do we use the Django web framework?
- It is a powerful web framework that is used as a container for various webapps in one website. For example one store website has a main page we can make multiple pages inside the Django project for Blogs and forms, we make different apps for different usage in one Django project.

Enter Command in Vs code Terminal
* Commands for installing virtualenv and django:

a. pip install Django
a. pip install virtualenv
c. env\Scripts\activate.bat (activate virtual environment)

* Commands to create the Django project:
a. mkdir <workspace-name> (Only required if you wanto to create another workspace)
b. django-admin startproject <project-name>(we will take 'django_project' as a project name for better understanding)
c. cd django_project
d. Create static and templates folder in the project for further apps creation usage
e. Register '[BASE_DIR / "templates"]' in the settings.py TEMPLATES > DIR attribute. (This basically means that you are providing the 'templates' from the BASE_DIR)


* run on server
a. python manage.py makemigrations (When major file changes are done add to migrations)
b. python manage.py migrate (to update the changes to the website)
g. python manage.py runserver (start the server)

* Create app command
1. run: python manage.py startapp <app-name>
2. Register the <app-name> in settings.py INSTALLED_APPS
3. create urls.py file in the app
4. change the path of url in the urls.py file (of project ) to include the urls of app
5. copy-paste the basic content of project's urls.py file to the app's urls.py file and from <app-name> import views.
6. changes in settings.py
    1. INSTALLED_APPS += APPNAME
    2. TEMPLATES = BASE_DIR/'templates'
    3. STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static/"),
    )

* Architecture of Django:
Django uses MVT(Model View Template). 

Model-  is going to act as the interface of your data. It is responsible for maintaining data. It is the logical data structure behind the entire application and is represented by a database.

View- file has the total use of css and javascript with the HTML files and that is shown when the server is running meaning the website GUI itself.

Template- contains all the skeleton of website meaning HTML as well as some special syntax describing how dynamic content will be inserted. 


* 1. manage.py :- This file is used basically as a command-line utility and for deploying, debugging, or running our web application

imp commands of manage.py:
a. runserver: This command is used to run the server for our web application.
b. Migration: This is used for applying the changes done to our models into the database.
That is if we make any changes to our database then we use migrate command.
This is used the first time we create a database.
c. Makemigration: this is done to apply new migrations that have been carried out due to the changes in the database.

* 2. _init_.py :- This file remains empty and is present their only to tell that this particular directory is a package.

* 3. settings.py :- (Project specific file)This file is present for adding all the applications and the middleware application present. Also, it has information about templates and databases. Overall, this is the main file of our Django web application.

* 4. urls.py :- (Project specific file/ App specific) This file is present for all the URLs of our web application. This file has the lists of all the endpoints that we will have for our website. It redirects the user to a premade web page when the url changes.

*5. wsgi.py :- This file mainly concerns with the WSGI server and is used for deploying our applications on to servers like Apache etc. WSGI, short for Web Server Gateway Interface can be thought of as a specification that describes how the servers interact with web applications.

* 6. asgi.py :- ASGI, short for Asynchronous Server Gateway interface also has the work similar to WSGI but this is better than the previous one as it gives better freedom in Django development. Thatâ€™s why WSGI is now being increasingly replaced by ASGI.

* views.py :-Django views are Python functions that takes http requests and returns http response, like HTML documents.

Project Structure of Django projects:

main project
    project - folder

    app - folder
        template
            html files(configure in settings)

    static - folder
        styles
            css files
        JS
            js files
        images 
            image files

    manage.py - file


*To include another html file:

{% include 'navbar.html' %}

* To load the static files in the html file:
{% load static %}

* Getting the path to an image file:
<img src="{% static "images/a.png" %}">


* Create a superuser:
a. python manage.py createsuperuser
b. add email, name, and password
c. login in the admin panel
d. create a class model in the model.py file of the app 
e. register it in the admin.py file of the app
f. migrate and then start the server again